//////////////////////////////
// Parser file for leod's bot.
/////
//
// Needs to export a 'parse' function that is called for every message the bot reads.
// function parse(info)
//   info: An object with information about the current bot state. Keys:
//     memory: The global memory object the bot posesses. Kept between reboots.
//     temp: The temporary memory object the bot posesses. Deleted upon reboot.
//     message: Discord.js's Message object. Represents the message that triggered this command, if it is a command.
//     bot: Discord.js Client object. Represents the bot.
//     config: The config object.
//     core: A subset of bot_core to expose some functions to commands. Is eventEmitter, look at its definition in init() for functions.
//           Pay special attention to the command* helper functions.
//
/////

// Handles all updates to faction AP for each message.
exports.parse = (info) => {

	var message = info.message;

	// Don't take into account command calls, locked messages or bot messages.
	if(info.message.content.indexOf(info.config.prefix) === 0
		|| !info.core.isPublic(info.message)
		|| info.message.author.bot) {
		return;
	}
	
	var guild_config = info.config;

	// Return if in DM.
	if(!message.guild) {
		return;
	}
	// Return if the message has no guild member attached (rare error?).
	if(!message.member) {
		return;
	}

	var guild_mem = info.memory.guilds[message.guild.id];

	if(!guild_mem.hasOwnProperty("factions")) {
		return;
	}

	if(!guild_mem.hasOwnProperty("faction_messages_sent")) {
		guild_mem.faction_messages_sent = {};
	}

	// Find which factions the user is a part of.
	var user_factions = [];
	message.member.roles.forEach((cur_role, role_id) => {
		// If the current role is a faction role, remember it for points.
		if(guild_mem.factions.hasOwnProperty(cur_role.name)) {
			user_factions.push(cur_role.name);
		}
	});

	// If they are part of no factions, just return.
	if(user_factions.length === 0) {
		return;
	}

	////
	// If they are a part of any factions, check if they should be adding points.
	var user_id = message.author.id;
	if(!guild_mem.faction_messages_sent[user_id]) {
		guild_mem.faction_messages_sent[user_id] = 0;
	}

	// If this is the first message, set a timer to reset the limit.
	if(guild_mem.faction_messages_sent[user_id] === 0) {
		info.core.setPersistentTimeout({
			"name": "resetFactionMessages",
			"args": {"guild": message.guild.id, "user": user_id},
			"type": "core",
		}, guild_config.faction_cooldown * 60000);
	}

	// Add the specified amount of points for the faction(s), if this message doesn't go over the maximum.
	guild_mem.faction_messages_sent[user_id] += 1;
	if(guild_mem.faction_messages_sent[user_id] <= guild_config.faction_max_messages) {
		// Give the faction(s) their point(s).
		user_factions.forEach(faction_name => {
			guild_mem.factions[faction_name].activity_points += guild_config.faction_points_per_message;
			guild_mem.factions[faction_name].activity_points = Math.round(guild_mem.factions[faction_name].activity_points * 10000) / 10000;
		});
	}

}